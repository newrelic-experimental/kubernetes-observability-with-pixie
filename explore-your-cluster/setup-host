#! /bin/bash

cat <<EOF > kube.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: add-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: add-service
  template:
    metadata:
      labels:
        app: add-service
    spec:
      containers:
        - name: add-service
          image: bitprj/add-service
          ports:
            - containerPort: 31337
          env:
            - name: UPLOAD_ENDPOINT
              value: upload-service:80
            - name: ENDPOINT
              value: "$ENDPOINT"
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: add-service
spec:
  selector:
    app: add-service
  ports:
    - port: 80
      targetPort: 31337
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-service
  template:
    metadata:
      labels:
        app: admin-service
    spec:
      containers:
        - name: admin-service
          image: bitprj/admin-service
          ports:
            - containerPort: 4040
          env:
            - name: HOST
              value: mysql
            - name: PASSWORD
              value: password
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: admin-service
spec:
  selector:
    app: admin-service
  ports:
    - port: 80
      targetPort: 4040
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: fetch-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fetch-service
  template:
    metadata:
      labels:
        app: fetch-service
    spec:
      containers:
        - name: fetch-service
          image: bitprj/fetch-service
          ports:
            - containerPort: 1337
          env:
            - name: HOST
              value: mysql
            - name: PASSWORD
              value: password
            - name: MANIPULATE_ENDPOINT
              value: manipulation-service:80
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: fetch-service
spec:
  selector:
    app: fetch-service
  ports:
    - port: 80
      targetPort: 1337
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-service
  template:
    metadata:
      labels:
        app: frontend-service
    spec:
      containers:
        - name: frontend-service
          image: bitprj/frontend-service
          ports:
            - containerPort: 3000
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: frontend-service
  ports:
    - port: 80
      targetPort: 3000
      nodePort: 30001
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway-service
  template:
    metadata:
      labels:
        app: gateway-service
    spec:
      containers:
        - name: gateway-service
          image: bitprj/gateway-service
          ports:
            - containerPort: 4444
          env:
            - name: FETCH_ENDPOINT
              value: fetch-service:80
            - name: ADD_ENDPOINT
              value: add-service:80
            - name: MODERATE_ENDPOINT
              value: moderate-service:80
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: gateway-service
spec:
  selector:
    app: gateway-service
  ports:
    - port: 80
      targetPort: 4444
  type: LoadBalancer

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: manipulation-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: manipulation-service
  template:
    metadata:
      labels:
        app: manipulation-service
    spec:
      containers:
        - name: manipulation-service
          image: bitprj/manipulation-service
          ports:
            - containerPort: 80
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: manipulation-service
spec:
  selector:
    app: manipulation-service
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: moderate-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: moderate-service
  template:
    metadata:
      labels:
        app: moderate-service
    spec:
      containers:
        - name: moderate-service
          image: bitprj/moderate-service
          ports:
            - containerPort: 5000
          env:
            - name: HOST
              value: mysql
            - name: PASSWORD
              value: password
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: moderate-service
spec:
  selector:
    app: moderate-service
  ports:
    - port: 80
      targetPort: 5000
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
          # Use secret in real usage
        - name: MYSQL_ROOT_PASSWORD
          value: password
        - name: MYSQL_DATABASE
          value: main
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        # - name: mysql-persistent-storage
        #   mountPath: /var/lib/mysql
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-initdb
          configMap:
            name: mysql-initdb-config
        # - name: mysql-persistent-storage
        #   persistentVolumeClaim:
        #     claimName: mysql-pv-claim
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  initdb.sql: |
    CREATE TABLE IF NOT EXISTS images(id int NOT NULL AUTO_INCREMENT, keyId varchar(30), url varchar(255), fileName varchar(255), description varchar(255), approve varchar(30), PRIMARY KEY(id));
    INSERT INTO images VALUES (1, 's7xvjkdunfbeuae2', 'https://tinyhats.s3.amazonaws.com/s7xvjkdunfbeuae2.png', 's7xvjkdunfbeuae2.png', 'baby', 'true');
    INSERT INTO images VALUES (2, '3joabx0ix4f1xtgy', 'https://tinyhats.s3.amazonaws.com/3joabx0ix4f1xtgy.png', '3joabx0ix4f1xtgy.png', 'bucket', 'true');
    INSERT INTO images VALUES (3, 's9qnf55ajq3zbzio', 'https://tinyhats.s3.amazonaws.com/s9qnf55ajq3zbzio.png', 's9qnf55ajq3zbzio.png', 'beach', 'true');
    INSERT INTO images VALUES (4, 'yikpnx1etovnqals', 'https://tinyhats.s3.amazonaws.com/yikpnx1etovnqals.png', 'yikpnx1etovnqals.png', 'spinner', 'true');
    INSERT INTO images VALUES (5, 'uwevrh9jc5tix6ck', 'https://tinyhats.s3.amazonaws.com/uwevrh9jc5tix6ck.png', 'uwevrh9jc5tix6ck.png', 'cartoon', 'true');
    INSERT INTO images VALUES (6, '0ebt45s6ycz4x59c', 'https://tinyhats.s3.amazonaws.com/0ebt45s6ycz4x59c.png', '0ebt45s6ycz4x59c.png', 'skull', 'true');
    INSERT INTO images VALUES (7, 't7p9oczddo3f8o7r', 'https://tinyhats.s3.amazonaws.com/t7p9oczddo3f8o7r.png', 't7p9oczddo3f8o7r.png', 'blob', 'true');
    INSERT INTO images VALUES (8, 'tae3p4v8kmpxrgxa', 'https://tinyhats.s3.amazonaws.com/tae3p4v8kmpxrgxa.png', 'tae3p4v8kmpxrgxa.png', 'santa', 'true');
    INSERT INTO images VALUES (9, 'gq4gupxpne9fyzc3', 'https://tinyhats.s3.amazonaws.com/gq4gupxpne9fyzc3.png', 'gq4gupxpne9fyzc3.png', 'st-patricks', 'true');
    INSERT INTO images VALUES (10, '4scyadmo09jurf0w', 'https://tinyhats.s3.amazonaws.com/4scyadmo09jurf0w.png', '4scyadmo09jurf0w.png', 'santa', 'true');
    INSERT INTO images VALUES (11, 'rd0y1x24tt0rnnf9', 'https://tinyhats.s3.amazonaws.com/rd0y1x24tt0rnnf9.png', 'rd0y1x24tt0rnnf9.png', 'graduation', 'true');
    INSERT INTO images VALUES (12, 'hmc8jrjk7eiesldh', 'https://tinyhats.s3.amazonaws.com/hmc8jrjk7eiesldh.png', 'hmc8jrjk7eiesldh.png', 'blob', 'true');
    INSERT INTO images VALUES (13, 'bk9zrl33auwtpiju', 'https://tinyhats.s3.amazonaws.com/bk9zrl33auwtpiju.png', 'bk9zrl33auwtpiju.png', 'pirate', 'true');
    INSERT INTO images VALUES (14, 'lolmekg6trszt1vl', 'https://tinyhats.s3.amazonaws.com/lolmekg6trszt1vl.png', 'lolmekg6trszt1vl.png', 'pokemon', 'true');
    INSERT INTO images VALUES (15, '8k2bi1bwzvcu6bos', 'https://tinyhats.s3.amazonaws.com/8k2bi1bwzvcu6bos.png', '8k2bi1bwzvcu6bos.png', 'clown', 'true');
    INSERT INTO images VALUES (16, 'llzavthecfp2ul65', 'https://tinyhats.s3.amazonaws.com/llzavthecfp2ul65.png', 'llzavthecfp2ul65.png', 'spy', 'true');
    INSERT INTO images VALUES (17, '40rzx3d4dwd0chm3', 'https://tinyhats.s3.amazonaws.com/40rzx3d4dwd0chm3.png', '40rzx3d4dwd0chm3.png', 'st-patricks', 'true');
    INSERT INTO images VALUES (18, 'rbacsal6uglwhcol', 'https://tinyhats.s3.amazonaws.com/rbacsal6uglwhcol.png', 'rbacsal6uglwhcol.png', 'mario', 'true');
    INSERT INTO images VALUES (19, 'tg9cvjo18qa39yku', 'https://tinyhats.s3.amazonaws.com/tg9cvjo18qa39yku.png', 'tg9cvjo18qa39yku.png', 'tophat', 'true');
    INSERT INTO images VALUES (20, 'a27nto1wnc85nc0c', 'https://tinyhats.s3.amazonaws.com/a27nto1wnc85nc0c.png', 'a27nto1wnc85nc0c.png', 'pilot', 'true');
    INSERT INTO images VALUES (21, 'rl0kbydgb6u1cap8', 'https://tinyhats.s3.amazonaws.com/rl0kbydgb6u1cap8.png', 'rl0kbydgb6u1cap8.png', 'tophat', 'true');
    INSERT INTO images VALUES (22, '26xxbuasu4ud1r32', 'https://tinyhats.s3.amazonaws.com/26xxbuasu4ud1r32.png', '26xxbuasu4ud1r32.png', 'construction', 'true');
    INSERT INTO images VALUES (23, '5k31vu7u07pwucvc', 'https://tinyhats.s3.amazonaws.com/5k31vu7u07pwucvc.png', '5k31vu7u07pwucvc.png', 'beach', 'true');
    INSERT INTO images VALUES (24, 's6qgqtfmqatkgh5z', 'https://tinyhats.s3.amazonaws.com/s6qgqtfmqatkgh5z.png', 's6qgqtfmqatkgh5z.png', 'poop', 'true');
    INSERT INTO images VALUES (25, 'zj9lrq1a9cmaz67k', 'https://tinyhats.s3.amazonaws.com/zj9lrq1a9cmaz67k.png', 'zj9lrq1a9cmaz67k.png', 'turkey', 'true');
    INSERT INTO images VALUES (26, 'ulktlsrrmtj1va65', 'https://tinyhats.s3.amazonaws.com/ulktlsrrmtj1va65.png', 'ulktlsrrmtj1va65.png', 'pepe', 'true');
    INSERT INTO images VALUES (27, 'xff8x5s2icgckekt', 'https://tinyhats.s3.amazonaws.com/xff8x5s2icgckekt.png', 'xff8x5s2icgckekt.png', 'st-patricks', 'true');
    INSERT INTO images VALUES (28, 'alcj03xqojezuu1u', 'https://tinyhats.s3.amazonaws.com/alcj03xqojezuu1u.png', 'alcj03xqojezuu1u.png', 'shark', 'true');
    INSERT INTO images VALUES (31, '8tg4u10knvn9jq1w', 'https://tinyhats.s3.amazonaws.com/8tg4u10knvn9jq1w.png', '8tg4u10knvn9jq1w.png', 'alien', 'true');
    GRANT ALL PRIVILEGES
    ON main.images
    TO 'admin'@'%'
    IDENTIFIED BY 'password';

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: upload-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: upload-service
  template:
    metadata:
      labels:
        app: upload-service
    spec:
      containers:
        - name: upload-service
          image: bitprj/upload-service
          ports:
            - containerPort: 8080
          env:
            - name: HOST
              value: mysql
            - name: PASSWORD
              value: password
            - name: S3_ID
              value: "$S3_ID"
            - name: S3_SECRET
              value: "$S3_SECRET"
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: upload-service
spec:
  selector:
    app: upload-service
  ports:
    - port: 80
      targetPort: 8080
  type: ClusterIP
EOF

kubectl apply -f kube.yaml
sleep 180