#! /bin/bash

cat <<EOF > scenario-1.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: add-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: add-service
  template:
    metadata:
      labels:
        app: add-service
    spec:
      containers:
        - name: add-service
          image: bitprj/add-service
          ports:
            - containerPort: 31337
          env:
            - name: UPLOAD_ENDPOINT
              value: upload-service:80
            - name: ENDPOINT
              value: "$ENDPOINT"
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: add-service
spec:
  selector:
    app: add-service
  ports:
    - port: 80
      targetPort: 31337
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-service
  template:
    metadata:
      labels:
        app: admin-service
    spec:
      containers:
        - name: admin-service
          image: bitprj/admin-service
          ports:
            - containerPort: 4040
          env:
            - name: HOST
              value: mysql
            - name: PASSWORD
              value: password
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: admin-service
spec:
  selector:
    app: admin-service
  ports:
    - port: 80
      targetPort: 4040
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: fetch-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: fetch-service
  template:
    metadata:
      labels:
        app: fetch-service
    spec:
      containers:
        - name: fetch-service
          image: bitprj/fetch-service-beta
          ports:
            - containerPort: 1337
          env:
            - name: HOST
              value: mysql
            - name: PASSWORD
              value: password
            - name: MANIPULATE_ENDPOINT
              value: manipulation-service:80
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: fetch-service
spec:
  selector:
    app: fetch-service
  ports:
    - port: 80
      targetPort: 1337
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-service
  template:
    metadata:
      labels:
        app: frontend-service
    spec:
      containers:
        - name: frontend-service
          image: bitprj/frontend-service
          ports:
            - containerPort: 3000
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: frontend-service
  ports:
    - port: 80
      targetPort: 3000
      nodePort: 30001
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway-service
  template:
    metadata:
      labels:
        app: gateway-service
    spec:
      containers:
        - name: gateway-service
          image: bitprj/gateway-service
          ports:
            - containerPort: 4444
          env:
            - name: FETCH_ENDPOINT
              value: fetch-service:80
            - name: ADD_ENDPOINT
              value: add-service:80
            - name: MODERATE_ENDPOINT
              value: moderate-service:80
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: gateway-service
spec:
  selector:
    app: gateway-service
  ports:
    - port: 80
      targetPort: 4444
  type: LoadBalancer

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: manipulation-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: manipulation-service
  template:
    metadata:
      labels:
        app: manipulation-service
    spec:
      containers:
        - name: manipulation-service
          image: bitprj/manipulation-service
          ports:
            - containerPort: 80
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: manipulation-service
spec:
  selector:
    app: manipulation-service
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: moderate-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: moderate-service
  template:
    metadata:
      labels:
        app: moderate-service
    spec:
      containers:
        - name: moderate-service
          image: bitprj/moderate-service
          ports:
            - containerPort: 5000
          env:
            - name: HOST
              value: mysql
            - name: PASSWORD
              value: password
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: moderate-service
spec:
  selector:
    app: moderate-service
  ports:
    - port: 80
      targetPort: 5000
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
          # Use secret in real usage
        - name: MYSQL_ROOT_PASSWORD
          value: password
        - name: MYSQL_DATABASE
          value: main
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        # - name: mysql-persistent-storage
        #   mountPath: /var/lib/mysql
        - name: mysql-initdb
          mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-initdb
          configMap:
            name: mysql-initdb-config
        # - name: mysql-persistent-storage
        #   persistentVolumeClaim:
        #     claimName: mysql-pv-claim
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv-volume
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  initdb.sql: |
    CREATE TABLE IF NOT EXISTS images(id int NOT NULL AUTO_INCREMENT, keyId varchar(30), url varchar(255), fileName varchar(255), description varchar(255), approve varchar(30), PRIMARY KEY(id));
    INSERT INTO images VALUES (101, 'faznhokg9hvaz76p', 'https://tinyhats.s3.amazonaws.com/pixie.png', 'pixie.png', 'PIXIE', 'true');
    GRANT ALL PRIVILEGES
    ON main.images
    TO 'admin'@'%'
    IDENTIFIED BY 'password';

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: upload-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: upload-service
  template:
    metadata:
      labels:
        app: upload-service
    spec:
      containers:
        - name: upload-service
          image: bitprj/upload-service
          ports:
            - containerPort: 8080
          env:
            - name: HOST
              value: mysql
            - name: PASSWORD
              value: password
            - name: S3_ID
              value: "$S3_ID"
            - name: S3_SECRET
              value: "$S3_SECRET"
          imagePullPolicy: Always

---

apiVersion: v1
kind: Service
metadata:
  name: upload-service
spec:
  selector:
    app: upload-service
  ports:
    - port: 80
      targetPort: 8080
  type: ClusterIP
EOF

kubectl apply -f scenario-1.yaml
sleep 180