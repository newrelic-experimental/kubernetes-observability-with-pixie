slug: kubernetes-observability-with-pixie
id: fkl2bznpy0f6
type: track
title: Kubernetes Observability with Pixie
teaser: Debug issues in your K8s cluster with Pixie
description: |-
  ## Overview

  You’re the developer of TinyHat.me, a website and API for putting virtual hats on virtual heads that runs in kubernetes. But TinyHat has big problems. It’s time to instrument your cluster with Pixie and use it to find the source of your users’ frustrations.

  ## Objectives

  - Instrument your kubernetes cluster with New Relic + Pixie
  - Use PxL scripts in the Live Debugger to gather insights into your cluster’s behaviors
  - Find the root cause of two bugs in your software

  ## Requirements

  - A free [New Relic account](https://newrelic.com/signup?utm_source=developer-site)

  ## Important Note

  _This track utilizes an ephemeral virtual machine. As a result, finish the entire track in one sitting or you'll lose your progress when time expires._
icon: https://cdn.instruqt.com/assets/templates/kubernetes.png
tags: []
owner: newrelic
developers:
- aronquillo@newrelic.com
private: true
published: false
challenges:
- slug: explore-your-cluster
  id: zy30xlnit3ex
  type: challenge
  title: Explore your kubernetes cluster with Pixie
  teaser: Explore your kubernetes cluster with Pixie
  notes:
  - type: text
    contents: While you wait, we're spinning up your kubernetes cluster. Take this time to learn about the lab user interface.
  - type: text
    contents: At the top right of each challenge, you'll find a timer. Be mindful of the time it shows because if you don't finish this track within the time limit, you'll need to start over again. Don't worry though, we've given you a lot of margin in case you want to move at a slower pace.
  - type: text
    contents: Some challenges in this lab contain helpful images in the instructions. To resize the images, you can drag the divider between the workspace and the instructions.
  - type: text
    contents: When it's ready, click the button at the bottom right of your screen to start the first challenge.
  assignment: |-
    Your website, TinyHat.me, runs in kubernetes. In the **Shell** tab, view the pods that make up your application:

    ```
    kubectl get pods
    ```

    > **Note:** All your pods should be running by now, but if they're not, give them a few more minutes.

    Here, you can see ten containerized services, each with their own pod:

    - admin
    - add
    - moderate
    - svclb-gateway
    - frontend
    - upload
    - gateway
    - mysql
    - manipulation
    - fetch

    Instead of going into detail about these services now, you'll learn about them in context as you walk through this lab's scenarios.

    View your services next:

    ```
    kubectl get services
    ```

    Here, you can see your kubernetes services. Notice that most of your app services have a corresponding kubernetes service. One of these services is particularly important: **frontend-service**. This is a NodePort service that you connect to when you view your site.

    ## Try out your site

    1. Switch to the **Frontend** tab to see your application
    2. Select a number of hats to display and a hat type
    3. Select **Hat Me**

    Now Bob Ross is wearing the hat(s) that you selected. Cool, right?

    Switch to the **Admin** tab and approve the pending hat submissions. For each one, you're redirected to a new tab or window with a successful JSON response.

    It's critical that you moderate hats for your site so users don't upload inapproriate images. TinyHat.me is a family-friendly site, after all!
  tabs:
  - title: Shell
    type: terminal
    hostname: host
  - title: Frontend
    type: service
    hostname: host
    path: /
    port: 30001
  - title: Admin
    type: service
    hostname: host
    path: /admin?password=ilovecats
    port: 30001
  difficulty: basic
  timelimit: 30000
- slug: instrument-your-cluster
  id: bvjygxyhrykv
  type: challenge
  title: Instrument your kubernetes cluster with Pixie
  teaser: Instrument your kubernetes cluster with Pixie
  notes:
  - type: text
    contents: |-
      Pixie is an open source, state of the art Kubernetes monitoring solution that provides:

      - **Automatic** and **instant** baseline observability of your cluster
      - Actionable, **code-level** insights of your applications
  - type: text
    contents: In minutes, auto-telemetry with Pixie provides dynamic data such as protocol traces, resource metrics, and app metrics from your cluster—without an agent!
  - type: text
    contents: With New Relic's Pixie integration, we've simplified this process even more by providing a guided installation of Pixie into your cluster.
  - type: text
    contents: If you haven't signed into [New Relic](one.newrelic.com), do that now so you're ready to install Pixie into your cluster.
  - type: text
    contents: '**Remember:** To resize the images, you can drag the divider between the workspace and the instructions.'
  assignment: |-
    From the **New Relic** tab, open New Relic in an external window. On the right side of the upper navigation bar, click **Add more data**:

    ![Arrow pointing to the add more data button](https://raw.githubusercontent.com/newrelic-experimental/kubernetes-observability-with-pixie/main/assets/add-more-data.png)

    Click **Guided install**:

    ![Arrow pointing to the guided install button](https://raw.githubusercontent.com/newrelic-experimental/kubernetes-observability-with-pixie/main/assets/guided-install.png)

    Click **Kubernetes** to let New Relic guide you through instrumenting your Kubernetes cluster:

    ![Arrow pointing to the Kubernetes button](https://raw.githubusercontent.com/newrelic-experimental/kubernetes-observability-with-pixie/main/assets/kubernetes-install.png)

    Click **Begin installation**:

    ![Arrow pointing to the begin installation button](https://raw.githubusercontent.com/newrelic-experimental/kubernetes-observability-with-pixie/main/assets/begin-installation.png)

    Select your account, name your cluster "tiny-hat", and click **Continue**:

    ![Box highlighting the account and cluster name fields](https://raw.githubusercontent.com/newrelic-experimental/kubernetes-observability-with-pixie/main/assets/account-and-cluster.png)

    Leave the default choices. These provide you with a range of observability features for your cluster. Notably, the default options include "Instant service-level insights, full-body requests, and application profiles through Pixie" which you'll focus on in this lab.

    Click **Continue**:

    ![Box highlighting Pixie instrumentation](https://raw.githubusercontent.com/newrelic-experimental/kubernetes-observability-with-pixie/main/assets/pixie-instrumentation.png)

    In the next screen, you see a command for installing our Kubernetes integration into your cluster.

    Click **Copy command**:

    ![Arrow pointing to the copy command button](https://raw.githubusercontent.com/newrelic-experimental/kubernetes-observability-with-pixie/main/assets/helm.png)

    Now you're ready to install Pixie into your cluster.

    Switch to the **Shell** tab in your Instruqt workspace and paste the Helm 3 command.

    While you're installing Pixie, switch back to New Relic and click **Continue** to progress your guided installation to the final step. Here, you see a message that says "Listening for data":

    ![New Relic page showing listening for data](https://raw.githubusercontent.com/newrelic-experimental/kubernetes-observability-with-pixie/main/assets/listening.png)

     In a few minutes, your Helm command will complete, showing a message with the name, deployed date, namespace, and more:

    ```
    NAME: newrelic-bundle
    LAST DEPLOYED: Thu Sep 23 13:50:24 2021
    NAMESPACE: newrelic
    STATUS: deployed
    REVISION: 1
    TEST SUITE: None
    ```

    And soon after that, the New Relic page will update to tell you that we're receiving data from your cluster:

    ![New Relic page showing a successful install](https://raw.githubusercontent.com/newrelic-experimental/kubernetes-observability-with-pixie/main/assets/successful-install.png)

    Click **Kubernetes cluster explorer** to see your nodes, pods, deployments and a host of other data about your cluster, all in one view:

    ![New Relic cluster explorer](https://raw.githubusercontent.com/newrelic-experimental/kubernetes-observability-with-pixie/main/assets/cluster-explorer.png)

    Remember that you didn't have to install language-specific agents or specify hardly any data about your cluster during installation. Pixie was able to do figure it all out in minutes! On top of all the data you see in the cluster explorer, click a pod or a node to dig deeper and see the granular data that Pixie was able to access near-instantly:

    ![Pod data collected by Pixie](https://raw.githubusercontent.com/newrelic-experimental/kubernetes-observability-with-pixie/main/assets/pod-data.png)
  tabs:
  - title: New Relic
    type: website
    url: https://one.newrelic.com
    new_window: true
  - title: Shell
    type: terminal
    hostname: host
  difficulty: basic
  timelimit: 30000
- slug: scenario-1
  id: xrcjz9p5pnyw
  type: challenge
  title: Debug 404s in your service
  teaser: Figure out why users get 404s when trying to apply a hat.
  notes:
  - type: text
    contents: |-
      Uh oh! You look on social media and see some confused customers:

      <p align="center">
        <img src="https://raw.githubusercontent.com/newrelic-experimental/kubernetes-observability-with-pixie/main/assets/scenario-1-twitter.png" alt="A Twitter thread showing some users can't access a hat"/>
      </p>

      What's wrong with TinyHat.me? Use Pixie to find out.
  - type: text
    contents: Please wait while we simulate a bug in your cluster. This should take about three minutes.
  assignment: |-
    ## Reproduce the issue

    You've been notified by your users that users can't see a particular hat on TinyHat.me. Before you debug the issue, switch to the **Frontend** tab to reproduce it for yourself.

    The hat that users are supposedly having trouble with is called "PIXIE". Choose it from the hat selector. Also choose 1 from the hat number selector. Then, click **Hat me**.

    The loader spins for a while and results in a blank screen with no Bob Ross and no hat.

    > **Note:** The number of hats you choose to display has no effect on the result.

    If you do this again with your browser's console open, you'll see that the request to `/api/hat?number=1` responds with an undefined image url. So, when the image tries to load the image, it fails:

    The bad news is that you've confirmed there's an error in your application. The good news is that you recently instrumented your cluster with Pixie! Switch to the New Relic tab and sign into your account, if you haven't already.

    ## Debug your cluster

    From the New Relic homepage, go to **Kubernetes**:

    Click your cluster:

    Click **Live Debugging with Pixie**:

    This is Pixie's live, code-level debugger. You use it to drill down and learn more about the services in your cluster.

    Notice the **script** dropdown menu at the top of the debugger:

    Pixie's live debugger renders data based on open source scripts writtin in PxL, a proprietary scripting language. The default script is `px/cluster`, which shows cluster-level information including:

    - A service graph
    - Nodes
    - Namespaces
    - Services
    - Pods

    Scroll down to see the error rates for your services:

    Yikes! You have three services returning a lot of errors:

    - fetch-service
    - frontend-service
    - gateway-service

    You know that the website lives at frontend-service. You can reasonably rule this out as the culprit because you know it renders other hats just fine.

    To decide which service to look at first, scroll back up to the service graph:

    Here, you see that the frontend-service requests data from gateway-service. In turn, gateway-service requests data from fetch-service. Knowing this, gateway-service is a logical step forward.

    Double click the gateway-service in your service graph to see more about that service:

    Notice that Pixie's live debugger has seamlessly replaced cluster data with service data by changing the script:

    You're now using the `px/service` script filtered down to `default/gateway-service`. In this service, you see a graph with the errors, but not much about where those errors are coming from.

    Switch to the `px/service_stats` script, targeting `default/gateway-service`:

    This give a better picture of the errors in your service.

    Scroll down to the **Incoming Traffic** and **Outgoing Traffic** tables:

    Notice that the gateway service is returning the same amount of errors on inbound requests as it's receiving from outbound requests to the fetch service. This is a good indicator that you need to look at what's happening upstream.

    Switch to the `px/http_data_filtered` script, targeting `default/fetch-service` and requests with a 400 response status code:

    > **Note:** If you don't see any rows, switch back to the **Frontend** tab and try to render the PIXIE hat again a few times.

    Click on the row to learn more about requests to the fetch service that result in errors:

    Here, you see that the request path looks like `/fetch?style=PIXIE&number=1`. This looks right, because the hat style you chose is called `PIXIE`. So if the fetch service is still returning 400s, something wrong is happening when it tries to find the hat.

    Switch to the `px/mysql_data` script and add a source filter for `default/fetch-service`:

    Uh oh! These queries aren't returning any results. Click on one and look at the `req_body` to see the query:

    ```
    SELECT * FROM main.images WHERE BINARY description='pixie' AND approve='true'
    ```

    There's the problem! The `BINARY` effectively makes the `WHERE` condition case sensitive. Since the hat's style is called `PIXIE`, this condition fails to find it.

    ## Summary

    To recap, you observed an error in your application and used Pixie in New Relic to:

    1. Understand your services' relationships
    2. Review the error percentages for each of your services
    3. Look at individual response bodies
    4. Find a semantic error in a query within one of those services

    And you didn't even need to individually install agents in any of your services. Pixie was able to deliver all the information you needed!
  tabs:
  - title: New Relic
    type: website
    url: https://one.newrelic.com
    new_window: true
  - title: Frontend
    type: service
    hostname: host
    path: /
    port: 30001
  - title: Shell
    type: terminal
    hostname: host
  difficulty: basic
  timelimit: 30000
checksum: "1841109953837975036"
